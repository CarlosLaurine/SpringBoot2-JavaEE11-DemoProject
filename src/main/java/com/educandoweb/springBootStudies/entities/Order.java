package com.educandoweb.springBootStudies.entities;

//Inserting JPA's Relational-Object Mapping at the Class

import java.io.Serializable;
import java.time.Instant;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import com.educandoweb.springBootStudies.entities.enums.OrderStatus;
import com.fasterxml.jackson.annotation.JsonFormat;

//Defining it as a DataBase Table
@Entity
/*Signaling to JPA a new name for the auto-generated
  Order table at the database, in order to avoid conflicts
  with the reserved word "ORDER" from SQL*/
@Table(name = "tb_order")

/*Implementing Serializable interface in order to
allow Order Objects to be transformed into
byte sequences, thus ensuring a broader perspective
of manipulation (net roaming, file imprinting, etc)
*/
public class Order implements Serializable{
	//Serializable Serial Number
	private static final long serialVersionUID = 1L;
	
	//Defining its Primary Key attribute (id) as Auto-Generated by the DataBase
	@Id
	//Since this is a Numeric Key, it will be auto-incremented at the DataBase
	//To state this, the Mapping Command is the following, with the Auto-Incrementation Strategy defined between parenthesis
	@GeneratedValue(strategy= GenerationType.IDENTITY)
	private Long id;
	
	/*OBS:As tested at Postman, when there is a  manyToOne Relation, JPA will automatically load the "one" side if 
	  the "many" side is loaded. However, when there is a oneToMany Relation, JPA will not automatically load
	  (unless it is requested) the "many" side  if the "one" side is loaded, in order to prevent the memory
	  crash at the computer (This is called Lazy Loading)*/
	
	//Using Instant to declare the moment, instead of Date
	//OBS: From Java 8 release on, Date became obsolete to represent moments like in this case
	//To ensure that the instant will be displayed at JSON with the ISO-0681 format, the following annotation is used:
	
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss'Z'", timezone = "GMT")
	private Instant moment;
	
	//Defining User association
	/*Implementing the relation between Order and User (Many-to-One)
	  and using the following annotation to indicate to JPA the relation
	  it needs to establish at the DataBase*/
	
	/*Setting orderStatus as a number instead of Enum OrderStatus type,
	  to highlight the fact that an int number is being saved at H2 Database*/
	
	/*OBS:This int treatment will happen only internally, other treatments will
	  be applied to the internal Constructor and GET/SET Methods in order to 
	  keep their processing/returns as if orderStatus was typed as Enum */ 
	
	private Integer orderStatus;
	
	//Setting Order-to-User Relation Type
	@ManyToOne
	
	//Using a second annotation to generate a Foreign Key as a new column at the Order table at the Database, while assigning a name for this column, which is declared between the following parenthesis
	@JoinColumn(name = "client_id")
	
	private User client;

	//Since a framework is being used, it is obligatory to set an empty constructor	
	
	public Order() {
		
	}

	public Order(Long id, Instant moment, OrderStatus orderStatus, User client) {
		super();
		this.id = id;
		this.moment = moment;
		this.client = client;
		//Transforming OrderStatus type into an int type through setOrderStatus() Method
		setOrderStatus(orderStatus);;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Instant getMoment() {
		return moment;
	}

	public void setMoment(Instant moment) {
		this.moment = moment;
	}

	public OrderStatus getOrderStatus() {
		
		//Using custom Order Status Method valueOf() to convert int orderStatus into an enum type
		return OrderStatus.valueOf(orderStatus);
	}

	public void setOrderStatus(OrderStatus orderStatus) {
		//Testing whether it was passed a null value at the object constructor
		if(orderStatus != null) {
		//Using custom Order Status Method getCode() to convert OrderStatus orderStatus into an int type
		this.orderStatus = orderStatus.getCode();
		}
	}

	public User getClient() {
		return client;
	}

	public void setClient(User client) {
		this.client = client;
	}
	

	
	//Setting HashCode and Equals based only on Order ID
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Order other = (Order) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
	
	
	
	
}
